// Part 1

// 1
// Sigma - Implement function sigma(num) that, given a number, returns the sum of all positive integers up to the given number 
// (inclusive).  Ex: sigma(3) = 6 (or 1+2+3); sigma(5) = 15 (or 1+2+3+4+5).
function sigma(num){
    var sum = 0
    for (i=1;i<=num;i++) {
        sum = sum+i
    }
    return sum
}
console.log(sigma(3))
console.log(sigma(5))


// 2
// Factorial - Write a function factorial(num) that, given a number, returns the product (multiplication) of all positive 
// integers from 1 up to the given number (inclusive).  For example, factorial(3) = 6 (or 1*2*3); factorial(5) = 120 (or 1*2*3*4*5).
function factorial(num){
    var sum = 1
    for (i=1;i<=num;i++) {
        sum = sum*i
    }
    return sum
}
console.log(factorial(3))
console.log(factorial(5))

// 3
// Fibonacci - Create a function to generate Fibonacci numbers.  In this famous mathematical sequence, each number is the 
// sum of the previous two, starting with values 0 and 1.  Your function should accept one argument, an index into the sequence 
// (where 0 corresponds to the initial value, 4 corresponds to the value four later, etc).  Examples: fibonacci(0) = 0 (given), 
// fibonacci(1) = 1 (given), fibonacci(2) = 1 (fib(0)+fib(1), or 0+1), fibonacci(3) = 2 (fib(1) + fib(2)3, or 1+1), 
// fibonacci(4) = 3 (1+2), fibonacci(5) = 5 (2+3), fibonacci(6) = 8 (3+5), fibonacci(7) = 13 (5+8).  Do this without using 
// recursion first.  If you don't know what a recursion is yet, don't worry as we'll be introducing this concept in Part 2 
// of this assignment.
function fibonacci(num){
    var fib2back = 0
    var fib1back = 1
    var fib
    if (num == 0){
        return 0
    }
    else if (num == 1){
        return 1
    }
    else{
        for (i=2;i<=num;i++){
            fib = fib2back + fib1back
            fib2back = fib1back
            fib1back = fib
        }
        return fib
    }
}
console.log(fibonacci(7))

// 4
// Array: Second-to-Last: Return the second-to-last element of an array. Given [42, true, 4, "Liam", 7], return "Liam".  If 
// array is too short, return null.
var arr = [42, true, 4, "Liam", 7]
var arr1 = [1]
function secondToLast(arr){
    if(arr.length > 1){
        return arr[arr.length-2]
    } else {
        return null
    } 
}
console.log(secondToLast(arr))
console.log(secondToLast(arr1))

// 5
// Array: Nth-to-Last: Return the element that is N-from-array's-end.  Given ([5,2,3,6,4,9,7],3), return 4.  If the array 
// is too short, return null.
var arr = [5,2,3,6,4,9,7]
var arr1 = [1]
function nthToLast(arr, num){
    if(arr.length >= num){
        return arr[arr.length-num]
    } else {
        return null
    } 
}
console.log(nthToLast(arr,3))
console.log(nthToLast(arr,9))
console.log(nthToLast(arr,7))

// 6
// Array: Second-Largest: Return the second-largest element of an array. Given [42,1,4,3.14,7], return 7.  If the array is 
// too short, return null.
var arr = [42,1,4,3.14,7, 9, 56, 63]
function secondLargest(arr) {
    var tempLargest = arr[0]
    var temp2Largest
    for (i=0;i<arr.length;i++) {
        if (arr[i]>tempLargest){
            temp2Largest = tempLargest
            tempLargest = arr[i]
        }
    }
    return temp2Largest
}
console.log(secondLargest(arr))

// 7
// Double Trouble: Create a function that changes a given array to list each existing element twice, retaining original order.  
// Convert [4, "Ulysses", 42, false] to [4,4, "Ulysses", "Ulysses", 42, 42, false, false].
var arr = [4, "Ulysses", 42, false]
function doubler(arr) {
    len = arr.length
    arr.length = arr.length * 2
    for (i=1;i<=len;i++){
        arr[(len-i)*2] = arr[len-i]
        arr[(len-i)*2+1] = arr[len-i]
    }
    return arr
}
console.log(doubler(arr))

// PART 2 
// Fibonacci Recursive
function recFib(num){
    if (num <=0) {
        console.log("Supply a positive integer")
        return null
    }else if (num == 1 || num == 2) {
        return 1
    } else {
    fib = recFib(num-1) + recFib(num-2)
    return fib
    }
}
console.log(recFib(45))

//Recursive fill
//If you are actually looking at my work I felt like the guy on the video was very unclear when explaining recursion in 
//general and I had no idea what he was talking about for any of the recursive fill problem.